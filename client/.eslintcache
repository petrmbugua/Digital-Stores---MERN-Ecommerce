[{"/home/petr/projects/digital-stores/client/src/user/DeleteUser.js":"1","/home/petr/projects/digital-stores/client/src/user/Signup.js":"2","/home/petr/projects/digital-stores/client/src/user/Users.js":"3","/home/petr/projects/digital-stores/client/src/cart/Checkout.js":"4","/home/petr/projects/digital-stores/client/src/App.js":"5","/home/petr/projects/digital-stores/client/src/user/Profile.js":"6","/home/petr/projects/digital-stores/client/src/shop/NewShop.js":"7","/home/petr/projects/digital-stores/client/src/core/Home.js":"8","/home/petr/projects/digital-stores/client/src/user/EditProfile.js":"9","/home/petr/projects/digital-stores/client/src/product/Search.js":"10","/home/petr/projects/digital-stores/client/src/product/Products.js":"11","/home/petr/projects/digital-stores/client/src/product/Product.js":"12","/home/petr/projects/digital-stores/client/src/order/ShopOrders.js":"13","/home/petr/projects/digital-stores/client/src/order/ProductOrderEdit.js":"14","/home/petr/projects/digital-stores/client/src/order/Order.js":"15","/home/petr/projects/digital-stores/client/src/cart/CartItems.js":"16","/home/petr/projects/digital-stores/client/src/cart/Cart.js":"17","/home/petr/projects/digital-stores/client/src/reportWebVitals.js":"18","/home/petr/projects/digital-stores/client/src/auth/PrivateRoute.js":"19","/home/petr/projects/digital-stores/client/src/shop/Shops.js":"20","/home/petr/projects/digital-stores/client/src/cart/PlaceOrder.js":"21","/home/petr/projects/digital-stores/client/src/shop/MyShops.js":"22","/home/petr/projects/digital-stores/client/src/index.js":"23","/home/petr/projects/digital-stores/client/src/auth/Signin.js":"24","/home/petr/projects/digital-stores/client/src/Router.js":"25","/home/petr/projects/digital-stores/client/src/core/Navbar.js":"26","/home/petr/projects/digital-stores/client/src/order/api-order.js":"27","/home/petr/projects/digital-stores/client/src/product/DeleteProduct.js":"28","/home/petr/projects/digital-stores/client/src/shop/EditShop.js":"29","/home/petr/projects/digital-stores/client/src/product/Suggestions.js":"30","/home/petr/projects/digital-stores/client/src/product/MyProducts.js":"31"},{"size":1378,"mtime":1612364797990,"results":"32","hashOfConfig":"33"},{"size":4243,"mtime":1612461216560,"results":"34","hashOfConfig":"33"},{"size":1137,"mtime":1612366083600,"results":"35","hashOfConfig":"33"},{"size":3312,"mtime":1612366021570,"results":"36","hashOfConfig":"33"},{"size":200,"mtime":1612195170780,"results":"37","hashOfConfig":"33"},{"size":2135,"mtime":1612366111570,"results":"38","hashOfConfig":"33"},{"size":2617,"mtime":1612362530130,"results":"39","hashOfConfig":"33"},{"size":1613,"mtime":1612272425180,"results":"40","hashOfConfig":"33"},{"size":4419,"mtime":1612525603880,"results":"41","hashOfConfig":"33"},{"size":2179,"mtime":1612458525000,"results":"42","hashOfConfig":"33"},{"size":1378,"mtime":1612366172080,"results":"43","hashOfConfig":"33"},{"size":2903,"mtime":1612366177230,"results":"44","hashOfConfig":"33"},{"size":3816,"mtime":1612446674600,"results":"45","hashOfConfig":"33"},{"size":5041,"mtime":1612458405670,"results":"46","hashOfConfig":"33"},{"size":4133,"mtime":1612366279690,"results":"47","hashOfConfig":"33"},{"size":4644,"mtime":1612366344760,"results":"48","hashOfConfig":"33"},{"size":654,"mtime":1612366428170,"results":"49","hashOfConfig":"33"},{"size":362,"mtime":1612191824680,"results":"50","hashOfConfig":"33"},{"size":488,"mtime":1612348647300,"results":"51","hashOfConfig":"33"},{"size":1370,"mtime":1612366549790,"results":"52","hashOfConfig":"33"},{"size":1306,"mtime":1612366466380,"results":"53","hashOfConfig":"33"},{"size":3373,"mtime":1612366539350,"results":"54","hashOfConfig":"33"},{"size":542,"mtime":1612193723820,"results":"55","hashOfConfig":"33"},{"size":2604,"mtime":1612197909670,"results":"56","hashOfConfig":"33"},{"size":2179,"mtime":1612530260660,"results":"57","hashOfConfig":"33"},{"size":3172,"mtime":1612528829120,"results":"58","hashOfConfig":"33"},{"size":3172,"mtime":1612195197490,"results":"59","hashOfConfig":"33"},{"size":1363,"mtime":1612362065840,"results":"60","hashOfConfig":"33"},{"size":4518,"mtime":1612267045340,"results":"61","hashOfConfig":"33"},{"size":1791,"mtime":1612273644150,"results":"62","hashOfConfig":"33"},{"size":2733,"mtime":1612361878440,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12xyynr",{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"69"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/petr/projects/digital-stores/client/src/user/DeleteUser.js",[],"/home/petr/projects/digital-stores/client/src/user/Signup.js",["141"],"import React, { useState } from 'react';\nimport {\n  Button,\n  Card,\n  Form,\n  Icon,\n  Message,\n  Container,\n  // Checkbox,\n  Confirm,\n} from 'semantic-ui-react';\nimport { Redirect } from 'react-router-dom';\nimport { create } from './api-user.js';\n\nexport default function Signup() {\n  const [values, setValues] = useState({\n    name: '',\n    password: '',\n    email: '',\n    seller: '',\n    // open: false,\n    error: '',\n  });\n  const [redirect, setRedirect] = useState(false);\n  const [open, setOpen] = useState(false);\n  const handleRequestClose = () => {\n    setOpen(false);\n  };\n  const confirmAccount = () => {\n    setRedirect(true);\n  };\n  if (redirect) {\n    return <Redirect to='/signin' />;\n  }\n\n  const handleChange = (name) => (e) => {\n    setValues({ ...values, [name]: e.target.value });\n  };\n\n  const handleCheck = (e, checked) => {\n    setValues({ ...values, seller: checked });\n  };\n\n  const clickSubmit = () => {\n    const user = {\n      name: values.name || undefined,\n      email: values.email || undefined,\n      seller: values.seller || undefined,\n      password: values.password || undefined,\n    };\n    create(user).then((data) => {\n      if (data.error) {\n        setValues({ ...values, error: data.error });\n      } else {\n        setValues({\n          ...values,\n          error: '',\n          // open: true\n        });\n        setOpen(true);\n      }\n    });\n  };\n  return (\n    <>\n      <Container>\n        <Card.Group>\n          <Card>\n            <Card.Content>\n              <Card.Header>\n                <Icon name='user plus' /> Sign Up\n              </Card.Header>\n\n              <Card.Description>\n                <Form>\n                  <Form.Field>\n                    <label>Name</label>\n                    <input\n                      type='text'\n                      placeholder='Enter Your Name'\n                      value={values.name}\n                      onChange={handleChange('name')}\n                    />\n                  </Form.Field>\n\n                  <Form.Field>\n                    <label>Email</label>\n                    <input\n                      type='email'\n                      placeholder='Enter Email'\n                      value={values.email}\n                      onChange={handleChange('email')}\n                    />\n                  </Form.Field>\n\n                  {/* <Form.Field>\n                    <label>Are you a Seller ?</label>\n                    <Checkbox\n                      toggle\n                      checked={values.seller}\n                      onChange={handleCheck}\n                      label={values.seller ? 'Yes' : 'No'}\n                    />\n                  </Form.Field> */}\n\n                  {/* <Form.Field>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={values.seller}\n                          onChange={handleCheck}\n                        />\n                      }\n                      label={values.seller ? 'Yes' : 'No'}\n                    />\n                  </Form.Field> */}\n\n                  <Form.Field>\n                    <label>Password</label>\n                    <input\n                      type='password'\n                      placeholder='Enter Password'\n                      value={values.password}\n                      onChange={handleChange('password')}\n                    />\n                  </Form.Field>\n                </Form>\n              </Card.Description>\n            </Card.Content>\n\n            <Card.Content extra>\n              {values.error && (\n                <Message\n                  error\n                  header={<Icon name='info circle' />}\n                  content={values.error}\n                />\n              )}\n              <>\n                <Button onClick={clickSubmit}>Submit</Button>\n              </>\n            </Card.Content>\n          </Card>\n        </Card.Group>\n      </Container>\n\n      <Confirm\n        open={open}\n        header='New Account Created'\n        content='New account successfully created.'\n        cancelButton='Cancel'\n        confirmButton='Signin'\n        onCancel={handleRequestClose}\n        onConfirm={confirmAccount}\n      />\n    </>\n  );\n}\n",["142","143"],"/home/petr/projects/digital-stores/client/src/user/Users.js",[],["144","145"],"/home/petr/projects/digital-stores/client/src/cart/Checkout.js",[],"/home/petr/projects/digital-stores/client/src/App.js",[],["146","147"],"/home/petr/projects/digital-stores/client/src/user/Profile.js",["148"],"import React, { useState, useEffect } from 'react';\nimport { Container, Header, Card, Icon, Button } from 'semantic-ui-react';\nimport DeleteUser from './DeleteUser';\nimport auth from './../auth/auth-helper';\nimport { read } from './api-user.js';\nimport { Redirect, Link } from 'react-router-dom';\nimport MyOrders from './../order/MyOrders';\n\nexport default function Profile({ match }) {\n  const [user, setUser] = useState({});\n  const [redirectToSignin, setRedirectToSignin] = useState(false);\n  const jwt = auth.isAuthenticated();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    read(\n      {\n        userId: match.params.userId,\n      },\n      { t: jwt.token },\n      signal\n    ).then((data) => {\n      if (data && data.error) {\n        setRedirectToSignin(true);\n      } else {\n        setUser(data);\n      }\n    });\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [match.params.userId]);\n\n  if (redirectToSignin) {\n    return <Redirect to='/signin' />;\n  }\n  return (\n    <>\n      <Container>\n        <Card fluid>\n          <Header as='h2'>Profile</Header>\n\n          <Card.Content>\n            <Card.Header>\n              <Icon name='user circle' /> {user.name} {user.email}\n            </Card.Header>\n            <Card.Meta>\n              <span className='date'>\n                Joined: {new Date(user.created).toDateString()}{' '}\n              </span>\n            </Card.Meta>\n            <Card.Description>\n              {auth.isAuthenticated().user &&\n                auth.isAuthenticated().user._id === user._id && (\n                  <>\n                    <Link to={'/user/edit/' + user._id}>\n                      <Button>\n                        <Icon name='edit outline' />\n                      </Button>\n                    </Link>\n\n                    <DeleteUser userId={user._id} />\n                  </>\n                )}\n            </Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <MyOrders />\n          </Card.Content>\n        </Card>\n      </Container>\n    </>\n  );\n}\n","/home/petr/projects/digital-stores/client/src/shop/NewShop.js",[],"/home/petr/projects/digital-stores/client/src/core/Home.js",["149"],"import React, { useState, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport Suggestions from '../product/Suggestions';\nimport { listLatest, listCategories } from '../product/api-product.js';\nimport Search from '../product/Search';\nimport Categories from '../product/Categories';\n\nexport default function Home() {\n  const [suggestionTitle, setSuggestionTitle] = useState('Latest Products');\n  const [categories, setCategories] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    listLatest(signal).then((data) => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        setSuggestions(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    listCategories(signal).then((data) => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        setCategories(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  return (\n    <>\n      <Grid columns={2}>\n        <Grid.Row>\n          <Grid.Column>\n            <Search categories={categories} />\n            <Categories categories={categories} />\n          </Grid.Column>\n          <Grid.Column>\n            <Suggestions products={suggestions} title={suggestionTitle} />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n}\n","/home/petr/projects/digital-stores/client/src/user/EditProfile.js",["150"],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Checkbox, Form, Icon, Message } from 'semantic-ui-react';\nimport auth from './../auth/auth-helper';\nimport { read, update } from './api-user.js';\nimport { Redirect } from 'react-router-dom';\n\nexport default function EditProfile({ match }) {\n  const [values, setValues] = useState({\n    name: '',\n    email: '',\n    password: '',\n    seller: false,\n    redirectToProfile: false,\n    error: '',\n  });\n  const jwt = auth.isAuthenticated();\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    read(\n      {\n        userId: match.params.userId,\n      },\n      { t: jwt.token },\n      signal\n    ).then((data) => {\n      if (data && data.error) {\n        setValues({ ...values, error: data.error });\n      } else {\n        setValues({\n          ...values,\n          name: data.name,\n          email: data.email,\n          seller: data.seller,\n        });\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [match.params.userId]);\n\n  const clickSubmit = () => {\n    const user = {\n      name: values.name || undefined,\n      email: values.email || undefined,\n      password: values.password || undefined,\n      seller: values.seller || undefined,\n    };\n    update(\n      {\n        userId: match.params.userId,\n      },\n      {\n        t: jwt.token,\n      },\n      user\n    ).then((data) => {\n      if (data && data.error) {\n        setValues({ ...values, error: data.error });\n      } else {\n        auth.updateUser(data, () => {\n          setValues({ ...values, userId: data._id, redirectToProfile: true });\n        });\n      }\n    });\n  };\n  const handleChange = (name) => (event) => {\n    setValues({ ...values, [name]: event.target.value });\n  };\n  const handleCheck = (event, checked) => {\n    setValues({ ...values, seller: checked });\n  };\n\n  if (values.redirectToProfile) {\n    return <Redirect to={'/user/' + values.userId} />;\n  }\n  return (\n    <>\n      <Card.Group>\n        <Card>\n          <Card.Content>\n            <Card.Header>\n              <Icon name='user plus' /> Edit Profile\n            </Card.Header>\n\n            <Card.Description>\n              <Form>\n                <Form.Field>\n                  <label>Name</label>\n                  <input\n                    type='text'\n                    value={values.name}\n                    onChange={handleChange('name')}\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Email</label>\n                  <input\n                    type='email'\n                    value={values.email}\n                    onChange={handleChange('email')}\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Seller Account</label>\n                  <Checkbox\n                    toggle\n                    checked={values.seller}\n                    onChange={handleCheck}\n                    label={\n                      values.seller ? 'You Are Already A Seller' : 'Not A Seller Yet'\n                    }\n                  />\n                </Form.Field>\n\n                {/* <Form.Field>\n                  <label>Seller Account</label>\n                  <FormControlLabel\n                    control={\n                      <Switch checked={values.seller} onChange={handleCheck} />\n                    }\n                    label={values.seller ? 'Active' : 'Inactive'}\n                  />\n                </Form.Field> */}\n\n                <Form.Field>\n                  <label>Password</label>\n                  <input\n                    type='password'\n                    value={values.password}\n                    onChange={handleChange('password')}\n                  />\n                </Form.Field>\n              </Form>\n            </Card.Description>\n          </Card.Content>\n\n          <Card.Content extra>\n            {values.error && (\n              <Message\n                error\n                header={<Icon name='info circle' />}\n                content={values.error}\n              />\n            )}\n            <div className='ui two buttons'>\n              <Button basic color='green' onClick={clickSubmit}>\n                Submit\n              </Button>\n            </div>\n          </Card.Content>\n        </Card>\n      </Card.Group>\n    </>\n  );\n}\n",["151","152"],"/home/petr/projects/digital-stores/client/src/product/Search.js",[],"/home/petr/projects/digital-stores/client/src/product/Products.js",[],"/home/petr/projects/digital-stores/client/src/product/Product.js",["153"],"import React, { useState, useEffect } from 'react';\nimport { Segment, Icon, Grid, Item, } from 'semantic-ui-react';\nimport { read, listRelated } from './api-product.js';\nimport { Link } from 'react-router-dom';\nimport Suggestions from './../product/Suggestions';\nimport AddToCart from './../cart/AddToCart';\n\nexport default function Product({ match }) {\n  const [product, setProduct] = useState({ shop: {} });\n  const [suggestions, setSuggestions] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    read({ productId: match.params.productId }, signal).then((data) => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setProduct(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [match.params.productId]);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    listRelated(\n      {\n        productId: match.params.productId,\n      },\n      signal\n    ).then((data) => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setSuggestions(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [match.params.productId]);\n\n  const imageUrl = product._id\n    ? `/api/product/image/${product._id}?${new Date().getTime()}`\n    : '/api/product/defaultphoto';\n  return (\n    <Segment>\n      <Grid columns={2} divided>\n        <Grid.Row>\n          <Grid.Column>\n            <Item.Group>\n              <Item>\n                <Item.Image size='medium' src={imageUrl} />\n\n                <Item.Content>\n                  <Item.Meta>\n                    {product.quantity > 0 ? 'In Stock' : 'Out of Stock'}\n                  </Item.Meta>\n                  <Item.Header>{product.name} </Item.Header>\n                  <Item.Meta>\n                    <span className='price'>Ksh. {product.price}</span>\n                  </Item.Meta>\n                  <Item.Description>{product.description}</Item.Description>\n                  <Item.Description>\n                    <Link to={'/shops/' + product.shop._id}>\n                      <span>\n                        <Icon className='shopping basket' /> {product.shop.name}\n                      </span>\n                    </Link>\n                  </Item.Description>\n                  <Item.Description>\n                    <AddToCart item={product} />\n                  </Item.Description>\n                </Item.Content>\n              </Item>\n            </Item.Group>\n          </Grid.Column>\n\n          {suggestions.length > 0 && (\n            <Grid.Column>\n              <Suggestions products={suggestions} title='Related Products' />\n            </Grid.Column>\n          )}\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  );\n}\n","/home/petr/projects/digital-stores/client/src/order/ShopOrders.js",["154"],"import React, { useState, useEffect } from 'react';\nimport { Segment, List, Divider, Accordion, Icon } from 'semantic-ui-react';\nimport auth from './../auth/auth-helper';\nimport { listByShop } from './api-order.js';\nimport ProductOrderEdit from './ProductOrderEdit';\n\nexport default function ShopOrders({ match }) {\n  const [orders, setOrders] = useState([]);\n  const [open, setOpen] = useState(0);\n\n  const jwt = auth.isAuthenticated();\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    listByShop(\n      {\n        shopId: match.params.shopId,\n      },\n      { t: jwt.token },\n      signal\n    ).then((data) => {\n      if (data.error) {\n        console.log(data);\n      } else {\n        setOrders(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  const handleClick = (index) => (event) => {\n    setOpen(index);\n  };\n\n  const updateOrders = (index, updatedOrder) => {\n    let updatedOrders = orders;\n    updatedOrders[index] = updatedOrder;\n    setOrders([...updatedOrders]);\n  };\n\n  return (\n    <Segment>\n      <Segment>Orders in {match.params.shop}</Segment>\n\n      <List divided relaxed>\n        {orders.map((order, index) => {\n          return (\n            <Accordion>\n              <span key={index}>\n                <Accordion.Title\n                  active={open === index}\n                  onClick={handleClick(index)}\n                >\n                  <List.Item>\n                    <List.Content>\n                      <List.Header>{'Order # ' + order._id}</List.Header>\n                      <List.Description as='a'>\n                        {new Date(order.created).toDateString()}\n                      </List.Description>\n\n                      {open === index ? (\n                        <Icon className='chevron up' />\n                      ) : (\n                        <Icon className='chevron down' />\n                      )}\n                    </List.Content>\n                  </List.Item>\n                </Accordion.Title>\n\n                <Divider />\n\n                <Accordion.Content active={open === index}>\n                  <ProductOrderEdit\n                    shopId={match.params.shopId}\n                    order={order}\n                    orderIndex={index}\n                    updateOrders={updateOrders}\n                  />\n                  <>\n                    <Segment>Deliver to:</Segment>\n                    <List>\n                      <List.Item>\n                        <List.Icon name='user' />\n                        <List.Content>{order.customer_name}</List.Content>\n                      </List.Item>\n\n                      <List.Item>\n                        <List.Icon name='mail' />\n                        <List.Content>{order.customer_email}</List.Content>\n                      </List.Item>\n\n                      <List.Item>\n                        <List.Icon name='marker' />\n                        <List.Content>\n                          {order.delivery_address.street},{' '}\n                          {order.delivery_address.city},{' '}\n                          {order.delivery_address.state},{' '}\n                          {order.delivery_address.zipcode}\n                        </List.Content>\n                      </List.Item>\n\n                      <List.Item>\n                        <List.Icon name='globe' />\n                        <List.Content>\n                          {order.delivery_address.country}\n                        </List.Content>\n                      </List.Item>\n                    </List>\n                  </>\n                </Accordion.Content>\n\n                <Divider />\n              </span>\n            </Accordion>\n          );\n        })}\n      </List>\n    </Segment>\n  );\n}\n","/home/petr/projects/digital-stores/client/src/order/ProductOrderEdit.js",["155"],"/home/petr/projects/digital-stores/client/src/order/Order.js",["156","157"],"import React, { useState, useEffect } from 'react';\nimport { Card, Segment, Grid, Divider, Item } from 'semantic-ui-react';\nimport { read } from './api-order.js';\nimport { Link } from 'react-router-dom';\n\nexport default function Order({ match }) {\n  const [order, setOrder] = useState({ products: [], delivery_address: {} });\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    read({\n      orderId: match.params.orderId,\n    }).then((data) => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        setOrder(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  const getTotal = () => {\n    return order.products.reduce((a, b) => {\n      const quantity = b.status === 'Cancelled' ? 0 : b.quantity;\n      return a + quantity * b.product.price;\n    }, 0);\n  };\n\n  return (\n    <Card fluid>\n      <Segment>Order Details</Segment>\n\n      <Segment>\n        Order Code: <strong>{order._id}</strong> <br /> Placed on{' '}\n        {new Date(order.created).toDateString()}\n      </Segment>\n\n      <Grid columns={2} divided>\n        <Grid.Row>\n          <Grid.Column>\n            <Item.Group>\n              {order.products.map((item, i) => {\n                return (\n                  <span key={i}>\n                    <Item>\n                      <Item.Image\n                        size='small'\n                        src={'/api/product/image/' + item.product._id}\n                      />\n\n                      <Item.Content>\n                        <Item.Header>\n                          <Link to={'/product/' + item.product._id}>\n                            {item.product.name}\n                          </Link>\n                        </Item.Header>\n                        <Item.Meta>\n                          <span className='price'>\n                            Ksh. {item.product.price} x {item.quantity}\n                          </span>\n                        </Item.Meta>\n                        <Item.Meta>\n                          <span className='price'>\n                            Ksh. {item.product.price * item.quantity}\n                          </span>\n                        </Item.Meta>\n                        <Item.Meta>\n                          <span className='price'>Shop: {item.shop.name}</span>\n                        </Item.Meta>\n\n                        <Segment\n                          color={\n                            item.status === 'Cancelled' ? 'error' : 'secondary'\n                          }\n                        >\n                          Status: {item.status}\n                        </Segment>\n                      </Item.Content>\n                    </Item>\n                    <Divider />\n                  </span>\n                );\n              })}\n              <Segment>\n                <span>Total: Ksh. {getTotal()}</span>\n              </Segment>\n            </Item.Group>\n          </Grid.Column>\n\n          <Grid.Column>\n            <Item.Group>\n              <Item>\n                <Item.Content>\n                  <Item.Header>Deliver to:</Item.Header>\n                  <Item.Meta>\n                    <strong>{order.customer_name}</strong>\n                  </Item.Meta>\n\n                  <Item.Meta>{order.customer_email}</Item.Meta>\n\n                  <Divider />\n\n                  <Item.Meta>{order.delivery_address.street}</Item.Meta>\n                  <Item.Meta>\n                    {order.delivery_address.city},{' '}\n                    {order.delivery_address.state}{' '}\n                    {order.delivery_address.zipcode}\n                  </Item.Meta>\n                  <Item.Meta>{order.delivery_address.country}</Item.Meta>\n                  <Segment>\n                    Thank you for shopping with us! <br />\n                    You can track the status of your purchased items on this\n                    page.\n                  </Segment>\n                </Item.Content>\n              </Item>\n            </Item.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Card>\n  );\n}\n","/home/petr/projects/digital-stores/client/src/cart/CartItems.js",[],"/home/petr/projects/digital-stores/client/src/cart/Cart.js",[],["158","159"],"/home/petr/projects/digital-stores/client/src/reportWebVitals.js",[],"/home/petr/projects/digital-stores/client/src/auth/PrivateRoute.js",[],"/home/petr/projects/digital-stores/client/src/shop/Shops.js",[],["160","161"],"/home/petr/projects/digital-stores/client/src/cart/PlaceOrder.js",[],"/home/petr/projects/digital-stores/client/src/shop/MyShops.js",["162"],"import React, { useState, useEffect } from 'react';\nimport { Card, Button, Icon, Divider, List, Image } from 'semantic-ui-react';\nimport auth from './../auth/auth-helper';\nimport { listByOwner } from './api-shop.js';\nimport { Redirect, Link } from 'react-router-dom';\nimport DeleteShop from './DeleteShop';\n\nexport default function MyShops() {\n  const [shops, setShops] = useState([]);\n  const [redirectToSignin, setRedirectToSignin] = useState(false);\n  const jwt = auth.isAuthenticated();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    listByOwner(\n      {\n        userId: jwt.user._id,\n      },\n      { t: jwt.token },\n      signal\n    ).then((data) => {\n      if (data.error) {\n        setRedirectToSignin(true);\n      } else {\n        setShops(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  const removeShop = (shop) => {\n    const updatedShops = [...shops];\n    const index = updatedShops.indexOf(shop);\n    updatedShops.splice(index, 1);\n    setShops(updatedShops);\n  };\n\n  if (redirectToSignin) {\n    return <Redirect to='/signin' />;\n  }\n  return (\n    <>\n      <Card.Group>\n        <Card fluid>\n          <Card.Content>\n            <Card.Header>Your Shops</Card.Header>\n            <Card.Meta>\n              <Link to='/seller/shop/new'>\n                <Button color='primary'>\n                  <Icon name='add circle' size='large' /> New Shop\n                </Button>\n              </Link>\n            </Card.Meta>\n            <Divider />\n            <Card.Description>\n              {shops.map((shop, i) => {\n                return (\n                  <List key={i}>\n                    <List.Item>\n                      <Image\n                        size='small'\n                        src={\n                          '/api/shops/logo/' +\n                          shop._id +\n                          '?' +\n                          new Date().getTime()\n                        }\n                      />\n                      <List.Content>\n                        <List.Header>{shop.name}</List.Header>\n                        <List.Description>{shop.description}</List.Description>\n                      </List.Content>\n\n                      {auth.isAuthenticated().user &&\n                        auth.isAuthenticated().user._id === shop.owner._id && (\n                          <List.Content>\n                            <Link\n                              to={\n                                '/seller/orders/' + shop.name + '/' + shop._id\n                              }\n                            >\n                              <Button color='primary'>View Orders</Button>\n                            </Link>\n                            <Link to={'/seller/shop/edit/' + shop._id}>\n                              <Button>\n                                <Icon name='edit' size='large' />\n                              </Button>\n                            </Link>\n                            <DeleteShop shop={shop} onRemove={removeShop} />\n                          </List.Content>\n                        )}\n                    </List.Item>\n                  </List>\n                );\n              })}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n      </Card.Group>\n    </>\n  );\n}\n","/home/petr/projects/digital-stores/client/src/index.js",[],"/home/petr/projects/digital-stores/client/src/auth/Signin.js",[],"/home/petr/projects/digital-stores/client/src/Router.js",[],"/home/petr/projects/digital-stores/client/src/core/Navbar.js",[],"/home/petr/projects/digital-stores/client/src/order/api-order.js",[],"/home/petr/projects/digital-stores/client/src/product/DeleteProduct.js",[],"/home/petr/projects/digital-stores/client/src/shop/EditShop.js",["163"],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n  Icon,\n  Image,\n  TextArea,\n} from 'semantic-ui-react';\nimport auth from './../auth/auth-helper';\nimport { read, update } from './api-shop.js';\nimport { Redirect } from 'react-router-dom';\nimport MyProducts from './../product/MyProducts';\n\nexport default function EditShop({ match }) {\n  const [values, setValues] = useState({\n    name: '',\n    description: '',\n    image: '',\n    redirect: false,\n    error: '',\n    id: '',\n  });\n  const jwt = auth.isAuthenticated();\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    read(\n      {\n        shopId: match.params.shopId,\n      },\n      signal\n    ).then((data) => {\n      if (data.error) {\n        setValues({ ...values, error: data.error });\n      } else {\n        setValues({\n          ...values,\n          id: data._id,\n          name: data.name,\n          description: data.description,\n          owner: data.owner.name,\n        });\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  const clickSubmit = () => {\n    let shopData = new FormData();\n    values.name && shopData.append('name', values.name);\n    values.description && shopData.append('description', values.description);\n    values.image && shopData.append('image', values.image);\n    update(\n      {\n        shopId: match.params.shopId,\n      },\n      {\n        t: jwt.token,\n      },\n      shopData\n    ).then((data) => {\n      if (data.error) {\n        setValues({ ...values, error: data.error });\n      } else {\n        setValues({ ...values, redirect: true });\n      }\n    });\n  };\n  const handleChange = (name) => (event) => {\n    const value = name === 'image' ? event.target.files[0] : event.target.value;\n    setValues({ ...values, [name]: value });\n  };\n\n  const logoUrl = values.id\n    ? `/api/shops/logo/${values.id}?${new Date().getTime()}`\n    : '/api/shops/defaultphoto';\n  if (values.redirect) {\n    return <Redirect to={'/seller/shops'} />;\n  }\n  return (\n    <>\n      <Grid columns={2} divided>\n        <Grid.Row>\n          <Grid.Column>\n            <Card.Group>\n              <Card fluid>\n                <Card.Content>\n                  <Card.Header>Edit Shop</Card.Header>\n                  <Card.Meta>\n                    <Image src={logoUrl} size='small' />\n                  </Card.Meta>\n                  <Card.Description>\n                    <Form>\n                      <Form.Field>\n                        <Button as='label' htmlFor='file' type='button'>\n                          Change Logo <Icon name='file image' size='large' />{' '}\n                          {values.image ? values.image.name : ''}\n                        </Button>\n\n                        <input\n                          accept='image/*'\n                          onChange={handleChange('image')}\n                          id='file'\n                          type='file'\n                          hidden\n                        />\n                      </Form.Field>\n\n                      <Form.Field>\n                        <label>Shop Name:</label>\n                        <input\n                          type='text'\n                          value={values.name}\n                          onChange={handleChange('name')}\n                        />\n                      </Form.Field>\n\n                      <Form.Field>\n                        <label>Description:</label>\n                        <TextArea\n                          value={values.description}\n                          onChange={handleChange('description')}\n                        />\n                      </Form.Field>\n                    </Form>\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                  <Icon name='user' />\n                  Owner: {values.owner}\n                </Card.Content>\n                <Card.Content>\n                  {values.error && (\n                    <p>\n                      <Icon name='info circle' />\n                      {values.error}\n                    </p>\n                  )}\n\n                  <Button onClick={clickSubmit}>Update</Button>\n                </Card.Content>\n              </Card>\n            </Card.Group>\n          </Grid.Column>\n\n          <Grid.Column>\n            <MyProducts shopId={match.params.shopId} />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n}\n","/home/petr/projects/digital-stores/client/src/product/Suggestions.js",[],"/home/petr/projects/digital-stores/client/src/product/MyProducts.js",["164"],{"ruleId":"165","severity":1,"message":"166","line":40,"column":9,"nodeType":"167","messageId":"168","endLine":40,"endColumn":20},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"169","replacedBy":"173"},{"ruleId":"171","replacedBy":"174"},{"ruleId":"169","replacedBy":"175"},{"ruleId":"171","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":34,"column":6,"nodeType":"179","endLine":34,"endColumn":27,"suggestions":"180"},{"ruleId":"165","severity":1,"message":"181","line":9,"column":27,"nodeType":"167","messageId":"168","endLine":9,"endColumn":45},{"ruleId":"177","severity":1,"message":"182","line":42,"column":6,"nodeType":"179","endLine":42,"endColumn":27,"suggestions":"183"},{"ruleId":"169","replacedBy":"184"},{"ruleId":"171","replacedBy":"185"},{"ruleId":"165","severity":1,"message":"186","line":11,"column":10,"nodeType":"167","messageId":"168","endLine":11,"endColumn":15},{"ruleId":"177","severity":1,"message":"187","line":31,"column":6,"nodeType":"179","endLine":31,"endColumn":8,"suggestions":"188"},{"ruleId":"177","severity":1,"message":"189","line":32,"column":6,"nodeType":"179","endLine":32,"endColumn":8,"suggestions":"190"},{"ruleId":"165","severity":1,"message":"191","line":11,"column":11,"nodeType":"167","messageId":"168","endLine":11,"endColumn":17},{"ruleId":"177","severity":1,"message":"192","line":24,"column":6,"nodeType":"179","endLine":24,"endColumn":8,"suggestions":"193"},{"ruleId":"169","replacedBy":"194"},{"ruleId":"171","replacedBy":"195"},{"ruleId":"169","replacedBy":"196"},{"ruleId":"171","replacedBy":"197"},{"ruleId":"177","severity":1,"message":"198","line":32,"column":6,"nodeType":"179","endLine":32,"endColumn":8,"suggestions":"199"},{"ruleId":"177","severity":1,"message":"200","line":50,"column":6,"nodeType":"179","endLine":50,"endColumn":8,"suggestions":"201"},{"ruleId":"177","severity":1,"message":"202","line":30,"column":6,"nodeType":"179","endLine":30,"endColumn":8,"suggestions":"203"},"no-unused-vars","'handleCheck' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["204"],"no-negated-in-lhs",["205"],["204"],["205"],["204"],["205"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'jwt.token'. Either include it or remove the dependency array.","ArrayExpression",["206"],"'setSuggestionTitle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'jwt.token' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["207"],["204"],["205"],"'error' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'jwt.token' and 'match.params.shopId'. Either include them or remove the dependency array.",["208"],"React Hook useEffect has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["209"],"'signal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'match.params.orderId'. Either include it or remove the dependency array.",["210"],["204"],["205"],["204"],["205"],"React Hook useEffect has missing dependencies: 'jwt.token' and 'jwt.user._id'. Either include them or remove the dependency array.",["211"],"React Hook useEffect has missing dependencies: 'match.params.shopId' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["212"],"React Hook useEffect has a missing dependency: 'props.shopId'. Either include it or remove the dependency array.",["213"],"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},"Update the dependencies array to be: [jwt.token, match.params.userId]",{"range":"230","text":"231"},"Update the dependencies array to be: [jwt.token, match.params.userId, values]",{"range":"232","text":"233"},"Update the dependencies array to be: [jwt.token, match.params.shopId]",{"range":"234","text":"235"},"Update the dependencies array to be: [values]",{"range":"236","text":"237"},"Update the dependencies array to be: [match.params.orderId]",{"range":"238","text":"239"},"Update the dependencies array to be: [jwt.token, jwt.user._id]",{"range":"240","text":"241"},"Update the dependencies array to be: [match.params.shopId, values]",{"range":"242","text":"243"},"Update the dependencies array to be: [props.shopId]",{"range":"244","text":"245"},[968,989],"[jwt.token, match.params.userId]",[1082,1103],"[jwt.token, match.params.userId, values]",[864,866],"[jwt.token, match.params.shopId]",[890,892],"[values]",[700,702],"[match.params.orderId]",[919,921],"[jwt.token, jwt.user._id]",[1141,1143],"[match.params.shopId, values]",[822,824],"[props.shopId]"]